generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String   @id @default(uuid())
  bio       String?
  userId    String   @unique
  address   String?
  email     String?
  nrc       String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())

  updatedAt DateTime @default(now())
  photos    Photos[]
}

model User {
  id           String      @id @default(uuid())
  password     String
  phone        String      @unique
  name         String?
  profile      Profile?
  status       Boolean     @default(true)
  role         Role        @default(AGENT)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())
  commission   Commission? @relation(fields: [commissionId], references: [id])
  commissionId String?
}

model Commission {
  id     String        @id @default(uuid())
  name   String
  rate   Int
  type   comissionType @default(TwoD)
  user   User[]
  status Boolean       @default(true)
}

enum comissionType {
  TwoD
  ThreeD
}

model Photos {
  id        String   @id @default(uuid())
  name      String?
  path      String
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?
}

enum Status {
  Active
  Suspense
}

model TwoDNumer {
  id        String               @id @default(uuid())
  num       String               @unique @db.Char(2)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @default(now())
  keyWord   TwoDNumerOnKeyword[]
  limit     TwoDNumberOnLimit[]
}

model Keyword {
  id           String                  @id @default(uuid())
  name         String                  @unique
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @default(now())
  type         keywordType             @default(TwoD)
  twoDNumber   TwoDNumerOnKeyword[]
  threeDNumber ThreeDNumberOnKeyword[]
}

enum keywordType {
  TwoD
  ThreeD
}

model ThreeDNumer {
  id        String                  @id @default(uuid())
  num       String                  @unique @db.Char(3)
  keyword   ThreeDNumberOnKeyword[]
  createdAt DateTime                @default(now())
  updatedAt DateTime                @default(now())
  limit     ThreeDNumberonLimit[]


}

model TwoDNumberOnLimit {

  Limit       Limit     @relation(fields: [limitId], references: [id])
  limitId     String
  TwoDNumer   TwoDNumer @relation(fields: [twoDNumerId], references: [id])
  twoDNumerId String    @unique
  @@id([limitId, twoDNumerId])
}

model ThreeDNumberonLimit {

  Limit         Limit?       @relation(fields: [limitId], references: [id])
  limitId       String
  ThreeDNumer   ThreeDNumer? @relation(fields: [threeDNumerId], references: [id])
  threeDNumerId String       @unique
  @@id([limitId, threeDNumerId])
}

model Limit {
  id        String                @id @default(uuid())
  name      String
  amount    BigInt
  session   Session               @relation(fields: [sessionId], references: [id])
  twoDNum   TwoDNumberOnLimit[]
  threeDNum ThreeDNumberonLimit[]
  type      LimitType             @default(TwoD)
  sessionId String                @unique

}

enum LimitType {
  TwoD
  ThreeD
}

model TwoDNumerOnKeyword {
  Keyword     Keyword   @relation(fields: [keywordId], references: [id])
  keywordId   String
  TwoDNumer   TwoDNumer @relation(fields: [twoDNumerId], references: [id])
  twoDNumerId String

  @@id([keywordId, twoDNumerId])
}

model ThreeDNumberOnKeyword {

  ThreeDNumer   ThreeDNumer @relation(fields: [threeDNumerId], references: [id])
  threeDNumerId String
  Keyword       Keyword     @relation(fields: [keywordId], references: [id])
  keywordId     String
  @@id([keywordId, threeDNumerId])
}

enum SessionType {
  TwoDSession
  ThreeDSession
}

model Session {
  id        String      @id @default(uuid())
  name      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  type      SessionType @default(TwoDSession)
  fromDt    String
  toDt      String
  status    Boolean     @default(true)
  Limit     Limit[]
}

enum Role {
  AGENT
  SYS_ADMIN
  ADMIN
}

model Setting {
  id            String  @id @default(uuid())
  appNm         String
  copyRightText String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
